setiap tag pada HTML berada didalam sebuah kotak. properti display pada  CSS mengatur
perilaku dari kotak tersebut;

Pertemuan 1

display memiliki 4 bagian
1. Inline(kesamping);
    Element HTML yang secara default tidak menambahkan baris baru ketika dibuat;
    lebar dan tinggi elemennya sebesar konten yang ada didalamnya
    Kita tidak dapat mengantur tinggi dan lebar dari element inline
    Margin dan padding hanya mempengaruhi element secara horizontal, tidak vertikal

    *Element Inline
        b, strong, i, em, a, span, sub, sup, button, input, label, select, textarea, ...

   - inline barisnya kesamping sedangkan block arah ke bawah;
   - jika displaynya inline maka sebesar kontennya dan tidak bisa diatur lagi;
   - Cuma imagenya saja yang bisa kita atur ukuranya walaupun display bertipe inline; 

2. inline-block;
    Tidak ada element yang secara default memiliki properti display : inline-block;
    kita harus ubah secara manual properti tersebut 
    prilaku dasar sama dengan elemen inline;
    perbedaany, elemen inline-block dapat mengatur tinggi dan lebarnya; hehehe

3. block(kebawah);
  -  Element HTML yang secara default menambahkan baris baru ketika dibuat 
  -  jika tidak diatur lebarnya, maka lebar default dari element block akan memenuhi lebar
     dari browser / parent-nya;(memenuhi div ehhehehe)
  -  Kita dapat mengatur tinggi dan lebar dari elemen block 
  -  Didalam elemen block, kita dapat menyimpan tag dengan elemen inline, inline-block, atau
    bahkan element block lagi.

    *Element block
    h1-h6, p, ol, ul, li, form, hr, div,...

4. none;
  - Digunakan untuk meghilangkan sebuah elemen


5.Mengubah display dari nilai defaultnya;
      .navigasi li{
            display: inline;
        }

Pertemuan 2 
Dimensi & Overflow


Jika ingin menambahkan element pada content sebaiknya kita hanya mengatur lebarnya saja(widht), jika menambahkan
tinggi(height) content akan keluar dari elemen tersebut, karna tinggi akan bertambah sesuai isi content.

Dimensi cuma ada width & weigth;
Satuannya memiliki : 
1. px ==> absolute , nilainya pasti
2. %  ==> relative , nilainya relative terhadap nilai parentnya atau pembungkusnya
3, in, cm, mm, pt, pc ==> nilai di ambil di kehidupan nyata

Overflow memiliki 4 value : 
1. visible : elemen default, misal ada konten keluar dari parent maka diperlihatkan 
2. auto : CSS akan menambah srcoll jika konten sudah penuh atau melewati konten;
3. hidden : Konten akan disembuyikan, jika sudah melewati konten, maka yang tidak terkena konten akan dihapus;
4. scroll : seperti auto, tetapi jika konten tidak keluar dari konten makan scroll tetap ditampilkan;

Pertemuan 3
Box Model;

- Setiap elemen di halaman berada di dalam sebuah box(kotak)
- Kita bisa mengatur ukuran dan posisi kotak tersebut
- Kita bisa memberi warna/gambar sebagai background kotak tersebut;

*CSS box model mendefinisikan 'kotak' yang dihasilkan oleh sebuah elemen, lalu menampilkan sesuai
 dengan format visualnya (diisi dengan warna, gambar, ukuranya berapa);

*CSS Box Model terdiri dari :
1. margin : area transparan di sekitar kotak(diluar border)
2. border : area transparan didalam kotak (antara conntent dan border)
3. padding : batas disekelilingi content dan padding
4. content : konten sebenarnya didalam box, bisa berupa teks atau gambar

*properti untuk margin, paddding, & border;
margin-top      padding-top       border-top
margin-right    padding-right     border-right
margin-left     padding-left      border-left
margin-bottom   paddin-bottom     border-bottom
margin          padding           border

Pertemuan 4
Margin 
1. cara pakainya
    margin-left: 100px;
    margin-top: 30px;
    margin-bottom: 150px;
    margin-right: 50px;


2. overlapping margin = 2 margin saling bertemu
  *vertikal
  -  margin itu tidak saling menambahkan, khusus yang vertikal(keatas)
      akan mencari nilai terbesar saja;
  *horizontal
  -margin akan bertambah jika saling bertemu, khusus yang horizontal(kesamping)
3. negatif margin 
    - bisa berlawan arah, jika menggunakan negatif margin apa yang didekatnya dengan 
    elemennya akan ikut terangkat juga;


4. auto (khusus margin kanan dan kiri)
  harus keduanya disi supaya mendapat efek tersebut, supyua dicenter
    margin-left: auto;
    margin-right: auto;


5. shorthand = bagaimana cara mesingkat sintak menggunakan margin;
  cara penulisan
  margin : 10px 20px 30px 40px ( urutan sesuai arah jarum jam; atas,kanan,bawah,kiri)
  margin : 50px; (semua sisi akan menjadi  50px marginya)
  margin : 50px auto 50px (untuk yang ditengah itu kanan dan kiri marginnya jadi satu)
  margin : 80px auto(atas bawah 80px , kiri kanan auto)

Pertemuan 5



Pertemuan 6 

CSS Reset

Dihtml padding,border,margin sudah memeliki nilai default, untuk menhapus nilai default tersebut kita bisa menggunkan CSS reset;

Pertemuan 7

*Create simple website

Pertemuan 8
*FLOAT
Float  adalah properti pada CSS untuk mengatur posisi sebuah element. Sebuah element dapat dipaksa untuk berada sebelah kiri atau kanan dari 
parent / pembungkusnya dengan menggunakan properti ini.

*Value Float 
1. None : nilai default
2. left : elemen ada pada kiri
3. Right : elemernt ada pada kanan

Ada 2 prilaku pada saat membuat CSS
Normal Flow(inline,inline-blok, block,none) VS Out-of Flow(float)

*ketika kita memberikan properti float : left;
nilai tersebut akan keluar dari nilai normalnya, kontak yang dibawahnya(kotak 3) akan ditimpa atau belakangnya dengan kontak dibuat
karena kita mengisi properti float : left; dikotak 2.

*kenapa div nya runtuh atau collapse, karena ketika kotak sudah keluar dari flow

Yang bisa dilakuakan menggunakan properti float;

1. Text Wrapping
  Membuat Teks mengelilingi gambar / elemen lainnya

2. Image gallery
  membuat serangkaian gambar menjadi galeri

3. Multi-Columm Layout
  Membuat halaman memiliki beberapa kolom

4.DLL


Pertemuan 9 
*Clear : Berfungasi menghentikan / membersihkan float;

value nya 
1. left = membesihkan float left
2. right = membersihkan float right
3. both = membersihkan float keduanya (left dan right)

Cara menghentikan / membersihkan float 
- menggunakan property Overflow
  overflow : auto; artinya containernya akan menyesuaikan tinggi kontentnya, gambarnya akan masuk ke 
  container, itu cuma mengakalinya saja;
- menggunakan <div> kosong
  Buat div kosong untuk membersihkan floatnya, sesuaikan alokasi div kosongnya
  supaya membersihkan float, ingat setelah element atau bagian akhir taruh div kosongnya dengan style="clear;";;
  dengan mengggunakan div kosong ini membuat codingan kita tidak rapi;
- menggunakan teknik micro clearfix;
  menggunakan script, tinggal menaruh class cf di element yang akan 
  memberhentikan float;
- style CSS
  .container::after {

    content: '';
    display: block;
    clear: both;
  }


Pertemuan 10
membuat website dengan menambahkan fitur text wrapping menggunakan float;

Pertemuan 11
*Position : Static and Relative;

Position : dimana kita menggeserakan elementnya dan elemen tersebut tidak terpengaruh dengan element disekitarnya;

Propertinya = Position
value nya : 
1.Static, jika tidak mengisi nilai pada Position makan nilai defaultnya adalah static;

no-static;
2.Relative(melayang) : jika kita menggesernya maka elemen yang ditempati oleh tersebut masih ada, relative dengan posisi semulanya;
properti untuk relativeeeeeee : (top, botton, top, rigth);
3.absolute
4.fixed(iklan/navbar)


pertemuan 12 
*Position : absolute and fixed

absolute :
 1.Ketika kita menggerakan elemen dengan posisi absolute(menggunakan properti top,left,bottom dan right) 
   ,ruang yang ditempati oleh elemen tersebut dianggap tidak ada;
 2.Ketika kita menggerakan elemen dengan posisi absolute, elemen akan bergerak relatif terhadap posisi dari parent-nya,
    selama element parent-nya memiliki posisi yang juga non-static, mencari parent terdekat dan non static
    jika menggunakan absolute, cek juga parent nya dengan menggunakan relative

fixed(iklan/navbar) :
1. ketika kita menggerakan dengan properti top,bottom,left,right element tersebut selalu bergerak relative dengan windows 
   browser ini, fixed ini tidak memperdulikan element parent-nya walau position non static;
2. elemet dengan Position : fixed akan mengunci element tersebut, akan terkunci mengikuti scroll

 .kotak{
        height: 50px;
        background-color: black;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        opacity : 0.7; ===> untuk transparan
    }

      seolah" ditarik dari ujung ke ujung tanpa menggunakan dimensi width ;


  .close{
        width: 30px;
        height: 30px;
        background-color: white;
        border: 3px solid black ;
        border-radius: 50%;
        position: absolute;
        top : -15px;
        right : -15px;
    }


Pertemuan 13 Z-index;
z-index : untuk mengatur tumpukan element berlaku untuk element non-static (relative, absolute, fixed) 
properti : z-index 
value : angka, semakin besar angka, maka element tersebut layernya ke depan sebaliknya seperti itu;
        9999 paling depan
        -9999 paling belakang

Pertemuan 14 
Membuat website dengan menggunakan position no_static 

Pertemuan 15


*flexible box = Model Layout 1 dimensi yang dapat mengatur jarak dan penjajaran(menjajarkan 1 element dengan 1 element lainnya)
 antar item dalam sebuah Container.

*Flexbox Layout Module = Sebuah modul yang menawarkan cara yang paling efektif untuk menyusun, mensejajarakan dan mendistribusikan
jarak antar item dalam sebuah Container, meskipun ukurannya dinamis atau bahkan kita tidak tau.
  karena mungkin saja content kita di generate secara dinamis dengan menggunakan database atau API
  tulisannya brpa bnyak fotonya ukurannya brpa , akan dihasilkan secara automatis jika menggunakan flexbox ini.

hanya 1 dimensi ? 
hanya dapat mengatur(horizontal atau vertikal) 1 dimensi pada saat tertentu, 
antara baris atau kolom, tidak bisa keduanya sekaligus.
*sedangkan untuk mengatur 2 dimensi sekaligus itu menggunakan CSS grid.

-flex mempermudah penambahan(float+clear)
-flex mempertahankan ukuran items menyesuaikan dengan ukuran nilai container




============ Container / Parent ==================
properti pada container

*Flebox bisa mengatur cuma 1 dimensi saja secara baris atau kolom
harus ada :
1. Container(wadah)==> Parent
2. Items(Element)==> child

*arah flexbox
1. Main axis = ketika kita set elementnya sejajar secara horizontal(samping).
2. Cross axis = ketika kita set elementnya sejajar secara vertikal(keatas).
NB = jika awalnya sudah main axis dan kita ubah menjadi vertikal gunakan lah Cross axis, sebaliknya juga seperti itu.

*istilah ukuran flexbox

*main axis = sumbu utama sebuah dari container yang menentukan urutan dari penempatan items secara horizontal
*main-start | main end = mulai dan berakhir items yang disimpan didalam container
*main size = ukuran(width/height) dari container yang akan membuat dimensi dari items-nya relatid terhadap main size.
  items didalamnya akan relative dengan main sizenya, elemen didalam container bisa sesuai ukuranya dengan container
  kita tidak perlu mengaturnya karena sudah diatur secara otomatis.

1. Main size = ukuran container(Parent)
2. Cross Size = ukurran kolom-nya.  
3. main start = menentukan awalan dari element-nya secara horizontal(main axis)
4. main end = menentukan akhir dari element-nya secara horizontal(main axis)
5. cross start =  menentukan awalan dari element-nya secara horizontal(cross axis)
6. cross end =  menentukan akhir dari element-nya secara horizontal(cross axis)

properti pada container
1. display : flex atau inline-flex
membuat sebuah elemen parent menjadi flexbox, dan membuat elemen-elemen(items) di dalamnya bisa berprilaku flex juga
*kita mengatur jaraknya items-nya jgn hanya items aja kita atur, kita atur juga parentnya(bungkusnya) menjadi flex 

*flex-direction = Mengatur arah / urutan dari elemen-elemen(items/child) didalam container 
value flex-direction: 
1.row (arah kiri ke kanan)/(nilai default)
2.row-reverse(pembaliknya row)
3.column(arah keatas ke bawah)
4.column-reverse(pembalik column)

*flex-wrap = secara default, semua items didalam container akan berada pada satu baris meskipun ukuranya sudah tidak cukup
, wrap memungkinkan untuk memindahkan items ke baris dibawahnya

value pada flex-wrap
1.nowrap(tanpa wrap)
2. wrap
3. wrap-reverse(sebaliknya pada wrap biasa)

*Justify-content = untuk mengatur rata pada elemen-elemen(items/child) didalam container secara main axis(horizontal)
value-nya
1.flex-start = rata kiri
2. flex-end = rata kanan
3. flex-center = rata tengah
4. Space-between(antara) = bagian spasi kanannya(tengah) menyesuaikan dengan ukuran isi elementnya(items)  sama-sama dibagi rata
5. Space-around(sekitar) = setengah dari kiri dan kanannya
6. space-evenly(rata) = kiri dan kanannya sama 

*align-items = Mengatur perilaku penjajaran items terhadap cross axis(vertikal)
value-nya:
1. Flex-start = rata atas;
2. Flex-end = rata bawah
3. center = rata tengah
4. stretch(merenggang) = rata full ketika dimensinya tidak mengatur height-nya
5. baseline(garis_dasar) = menyesuaikan dengan baseline-nya atau tergantung dengan baseline font-nya

Align-content = Mengatur baris jarak antar items terhadap cross axis/vertikal(hanya berfungsi ketika items lebih dari 1 baris) gunakanlah 
                flex-wrap terlebih dahulu
value -nya
1.flex-start = semua items akan akan diarahkan atas.
2.flex-end = semua items akan akan diarahkan bawah.
3.center = semua items akan akan diarahkan center.
4. strectch = rata full ketika dimensinya tidak mengatur height-nya
5.space-between 
6.space-around 

============ Items / child ==================
properti pada items

*Order = untuk mengatur urutan pada element-nya, lebih mudah menukar items -nya, tanpa mengubah posisi htmlnya
 dan nilai default-nya 0
example :
1. order: 1;


*flex-grow atau shorthand0-nya flex = untuk mengatur ukuran pada items-nya, kita bisa mendapat hasil yang sama tanpa
  mendefinisikan-nya, responsive cokk
  ukuranya lngsung menyesuaikan dengan ukuran container-nya

.container div.tiga {
    flex: 2; == 2 x lipat besarnya sesuai dengan items masing-masing dan masing item lngung sendiri ngatur ukurannya
}

*align-self = mengatur perilaku penjajaran sebuah item yang spesifik terhadap cross axis(vertikal/atas) berlaku hanya 1 items saja
value-nya
1.flex-start = naik keatas
2. flex-end = turun kebawah
3. stretch = full 

example;
.container div.tiga {
    align-self: flex-end;
}

Pertemuan 16 
*Latihan flex box === membuat website

Pertemuan 17 
*Responsive navbar

/* list titik pada li sudah dihilangkan fungsi dari list-style: ; */
    list-style: none;

/* memanggil element tanpa menggunakan class, lihat juga parent(Pembungkus dari child-nya)*/
.menu-toggle span:nth-child(2) {
    background-color: red;
    n to h(child)
    memanggil childnya ya;
}


=======CSS Grid===========
Pertemuan 18
CSS grid = Modul CSS baru untuk mendefinisikanee sistem layout berbentuk grid dalam 2 dimensis(baris dan kolom) sekali gus 

Propertinya 
display: grid;
sama seperti flexbox

kenapa memakai CSS grid?
CSS grid bukan pegantinya flexbox, secara konsep lebih konpleks supaya bisa mengatur baris dan kolom secara bersamaan
nnti dipadukan dengan flexbox, tapi memiliki tujuan berbeda ya. css grid membuat layout lebih kompleks
*contoh : sebuah element(luar) diset jadi grid dan didalam element tersebut bisa diset menjadi flex;

properti-nya
display: grid;
bungkus dengan display:grid; dielement parent(container)


===== CSS Grid Terminolgy/istilah=======
1. Grid Container = Element pembungkus grid, didefinisikan dengan menuliskan, display: grid;(utama)
2. Grid Item = isi didalam container / Element-element yang berada (1level) di bawah  atau didalm grid container
3. Grid Line = Garis horizontal(kolom) atau vertikal (baris) yang memisahkan grid menjadi beberapa bagian dan ditandai 
dengan angka. ingata jumlah line pasti lebih 1 dari jumlah kolom atau baris nya, contoh ada baris 4 psti linenya ada 5 
ditandain dengan angka
4. Grid Cell = Perpotongan / pertemuan antara baris dan kolom didalam grid, sama seperti ms excel, setiap 1 cell pasti 
memiliki baris dan kolom
5. Grid Area = kumpulan lebih dari satu grid cell yang membentuk kotak, memiliki cell berbentuk kotak jangan sampai bolong disampingnya;
6. Grid Track  = Ukuran / jarak antara 2 grid line, bisa horizontal(baris) atau vertikal(kolom)/ bisa mengatur lebar secara horizontal
sebaliknya juga vertikal
7. Grid Gap = jarak (spasi) antara gird track / cell / ruang antar baris dan kolom


========= CSS Grid Properti===========

untuk Container(pembungkus)

1. Mengatur kolom & baris

=> grid-template-rows
=> grid-template-columns
==> 2 properti yang paling penting untuk mendefinisikan kolom / baris dengan cara menuliskan nilai terpisah oleh spasi (1 2 3).
    Nilai merepresentasikan ukuran grid track dan spasi merepresentasikan grid line.

Contoh :
.container{
  display:grid
  grid-template-columns: ukuran column
  grid-template-rows: ukuran baris
---------------------------------------------------------------------
  <track-size> ; bisa berupa px,%, auto, atau fr(fraction/pecahan)
  <line-nama> : nama yang bisa diberikan pada track (bebas aj untuk nemberikan nama)
  contoh: [awal] 100px [kolom2] 50px [kolom3] 50px;
}

======= Explicit & Impilicit Grid========
Explicit = ketika kita secara jelas menuliskan ukuran dari grid-nya,  kolom & baris 
Impilicit = kita grid-nya menentukan automatis sisa-nya, yang kita tidak tentukan secara Explicit(keluar dari area dan membuat items tersebut automatis)

nanti kita inspector menggunkan mozila liat bagian grid
untuk garis solid itu namanya Explicit(sudah ditentukan)
untuk garis putus-putus itu namanya items yang sudah ditentukan.
untuk garis titik-tik itu namanya Impilicit (sudah auto/ belum ditentukan)

Kenapa harus ada Explicit & Impilicit?
karena konten itu nantinya akan dinamis , sebagai web desainer belum mengetahui memiliki berapa item, munculnya sebagai
dinamis misalnya dari database atau lewat API
jadi kita bkin kolom 3x3 tapi kita tidak tau , nnti bisa jadi contentnya 50 tidak sesuai dengan perkiraan , bisa di atur oleh Impilicit

Propertinya yang menanganin Explicit & Impilicit
1.grid-auto-rows
2.grid-auto-columns
==> mengatur ukuran grid track yang tidak dituliskan pada grid-template(Impilicit track)
contoh:
.container{
  grid-auto-columns: <track-size>
  grid-auto-rows: <track-size>
}

3.grid-auto-flow = Mengatur penempatan item/ cell pada grid track,
termasuk yang ditulis secara Impilicit, kalau ada babalas atau Impilicit dia bisa mengaturnya bisa jadi kolom & baris
contoh:
.container{
  grid-auto-flow: row | column | row dense | column dense;
}

    grid-template-columns: 100px 50px ;
            grid-template-rows: 100px 50px;
            grid-auto-columns: 20px;
            grid-auto-flow: column;

            akan kesamping  : 1 3 5 7
                              2 4 6 8


=========Special Keyword & Function=========
1. repeat() = Menentukan Ukuran Grid track secara berulang, lebih mudah tidak menuliskan satu" akan merepotkan sekali itu 
contoh:
.container{

  display: grid;
  grid-template-columns: (9, 1fr); = artinya ada 9 kolom dan ukurannya 1r(pecahannya sama);

  === bisa juga seperti ini ada 9 kolom===
  .container{
    dispaly:grid;
    grid-template-columns: repeat(2, 1fr) repeat(7, 2.5fr);
    untuk ukuran kolom 1-2 1 fr, sedangkan kolom 3-9 ukuranya fr

  }

}

2. min-conntent & max-content = Menentukan Seberapa besar ukuran grid track(mau horizontal apa vertikal)
berdasarkan content pada sebuah item mau minimal apa maksimal, parameternya bukan angka tapi min & max;
contoh:
.container{
  display: grid;
  grid-template-columns: min-content | max-content;
}

-untuk min-content: konten(tulisan) yang paling besar dipakai untuk ukurannya/ tulisannya akan dipecah menjadi tiap" kata dan kata terpanjang akan dijadikan
ukurannya.
-untuk max-content: mengikuti isi ukurannya kontent-nya;

3. auto-fill & auto-fit
Menentukan Jumlah item untuk berada pada grid track
.container{
  display: grid;
  grid-template-columns: repeat(auto-fit, 70px);
}

auto-fit : secara explicite grid-nya digaris akhir columns
auto-fill : menyisakan ruang kosong seolah" bisa menampung lagi items lagi dan garis grid-nya berakhir disana;
cocok buat layout website responsive seolah ada items kosong.

4. minmax() = Menentukan ukuran minimal dan maksimal garis grid track.
contoh: 
.container{
  display:grid;
  grid-temminmax(200px, 300px);
  minimal segini , maksimalnya segini
 -responsive image galery
  responseve jika minimal maka mengikuti dengan nilai minimalnya, jika maksimal mengikuti nilai maksimalnya;
}
  bisa digunakan seperti ini;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));

  ====================Grid Area & Grid Gap=========================================
1. grid-template-areas = mendefinisikan grid template menggunakan nama dari area yang ditulis pada properti grid-area pada item;
properti pada items(isi container);
contoh :
  grid-template-areas: "<nama-area> | none | '.'"
                      "<nama-area> <nama-area>"

      .container{
            width: 80%;
            margin:50px auto;
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-template-areas: 'header header header'
                                'sidebar content content'
                                'sidebar content content'
                                'footer footer footer';
        }  

        tiap item isi properti
        grid-area: header sesuai dengan sketsa;
        merepresentasikan areanya

*Properti : grid-template(shorthand);
shorthand untuk mendefinisikan grid-template-rows, grid-template-columns, dan grid-template-areas 
dalam satu deklarasi.

contoh: 
shorthand
.container{
  grid-template : <grid-template-rows> | <grid-template-columns> / <grid-template-area>;
  inget rows dulu
}

shorthand
 display: grid;
            grid-template: [baris-mulai] 'header header header' 50px 
            [baris-akhir] 'footer footer footer' 100px [baris3-akhir] / 1fr 1fr 1fr;

2.Grid Gap = mendefinisikan ukuran grid-line / jarak antara baris dan kolom dan,  kolom  & baris sama ukuranya jika mengisi properti gap;
properti :
1.grid-column-gap(cara lama)
2.grid-row-gap(cara lama)
3.column-gap(cara baru)
4.row-gap(cara baru)

contoh:
.container{
  *cara baru :
  column-gap: <line-size>;
  row-gap:<line-size>;
  gap:<line-size>;

  *cara lama
  grid-columns-gap: <line-size>;
  grid-row-gap: <line-size>;
  grid-gap:<line-size>;
}


========== Grid Alignment =========
sama saja seperti perilaku di flex box;

1. Justify-items = sebuah properti mensejajarkan grid-items pada sumbu (horizontal&width)
contoh & memiliki 4 Value : 
.container{
  Justify-items : start | end | center | strectch;
  start: akan rapat kekiri(lihatnya horizontal ya), jika element diberi widht maka nilai defaultnya start.
  end : akan rapat kekanan (lihatnya horizontal ya)
  center : rapat kekanan secara horizontal;
  stretch : hanya berlaku jika kita tidak memberikan nilai widht pada elementnya, jika diberi nilai pada width maka ini tidak akan berpengaruh;
  untuk strectch adalah nilai defaultnya jika tidak mengisi nilai widht pada element;
}

properti ini biasanya membuat ukuran gambar berbeda tapi besejajar;


2. align-items = sebuah properti sama seperti justify tapi bedanya ini sumbunya mengarah ke (vertiikal&height);
contoh & memiliki 4 Value : 
.container{
  Justify-items : start | end | center | strectch;
  start: akan rapat kekiri(lihatnya vertikal ya), jika element diberi widht maka nilai defaultnya start.
  end : akan rapat kekanan (lihatnya vertikal ya)
  center : rapat kekanan secara vertikal;
  stretch : hanya berlaku jika kita tidak memberikan nilai height pada elementnya, jika diberi nilai pada height maka ini tidak akan berpengaruh;
  untuk strectch adalah nilai defaultnya jika tidak mengisi nilai heigth pada element;
}

membuat gambar bisa sejejar ke tengah(center)

3. place-items = sebuah shorthand untuk menulis justfy-items dan align-items dalam satu deklarasi.
.container{
  place-items: <align-items> <justify-items>;
  cara menuliskan shorthanya;
  jika nilainya sama maka 1 saja diinputkan nilainya;
  contoh: place-items : center >> jika nilainya sama ya!
}


==== justfy-content=====

1. justfy-content = Mengatur posisi seluruh grid container(seluruh ya) pada sumbu horizontal.(atur width&height ditiap" items)
    (atur width dicontainer)
 ini bisa melakukan ketika ukuran total grid lebih kecil dari ukuran containernya, biasanya ketika grid items-nya 
 menggunakan ukuran yang fixed(px)

  contoh & properti-nya: 
  .container {
    justfy-content: start(nilai default) | end | center | strectch | space-around | space-between | space-evenly;
  }

2. align-content(atur height dicontainer) = sama seperti justify-content, tapi untuk sumbunya vertikal(keatas)
contoh & properti-nya:
.container{
  align-content : start(nilai default) | end | center | strectch | space-around | space-between | space-evenly;

}
3.place-content: sebuah shorthand untuk menuliskan justfy-content dan align content dalam satu deklarasi.
contoh & value :
.container {
  place-content: <justify-content> <align-content>;
  sama seperti shorthand pada place-items;
}


===========CSS grid Properti pada items=============
Menentukan tempat dari grid item dengan mengacu pada nomor atau nama grid line yang speksifik(nnti ada nomor jika kita inspect menggunkan mozila)
kita bakal menenutukan nilai dengan inspector dari mozilla;  
1.grid-column-start 
2.grid-column-end
3.grid-row-start
4.grid-row-end

contoh & value :
.items{
  grid-column-start: <nomor-pada mozila> | <nama> |  span<nomor> | span <nama> | auto ;
  grid-column-end: <nomor-pada mozila> | <nama> |  span<nomor> | span <nama> | auto ;
  grid-row-start: <nomor-pada mozila> | <nama> |  span<nomor> | span <nama> | auto ;
  grid-row-end: <nomor-pada mozila> | <nama> |  span<nomor> | span <nama> | auto ;

  <nomor> | <nama> = mengacu pada nomor atau nama yang kita beri pada grid line;
  span <nomor> = item akan memanjang / melebar sampai sejumlah nomor <nomor>(yang kita tulis);
  span <nama> = item akan memanjang / melebar sampai ke nama grid line tertentu; 
}


contoh:
.my-item {
  grid-column-start:1;
  grid-column-end:3;
  grid-row-start:2;
  grid-rows-end:4;
  (mengikuti sesuai dengan nomer jika dipindahkan)
}

my.item {
    grid-column-start:1;
        grid-column-end: span 2;(span artinya ditambah, jika ada ada angka maka angka tersebut ditambahkan)
        grid-row-start: 1;
        grid-row-end: span 2;
}
  

===========  bisa juga menggunkan nama grid linenya contohnya ==============


  .container{
     grid-template-rows: [baris1] 100px [baris2] 100px [baris3] 100px [baris4]; 
     grid-template-columns: [kolom1] 1fr [kolom2] 1fr [kolom3] 1fr [kolom4];
  }

  .my-item{
    grid-column-start: kolom1;
        grid-column-end:kolom4;
        grid-row-start:baris1;
        grid-row-end:baris2;
  }

 ========= grid-column & grid-row ============= 
 shorthand untuk start dan end pada grid-column & grid row

 sama seperti sebelumnya atau contoh diatas tapi ikutin perintahnya jgn smpai salah
 .item{

   grid-column: <start-line> / <end-line> | <start-line> / span <value>;
   grid-row : <start-line> / <endline>  | <start-line>  / span <value>;
 } 

 contoh :

 .items{
   grid-column: 1 / 3;
   grid-row :1 / 2 ;

   atau bisa juga digunakan dengan value span(ditambah);

   grid-column: 1 / span 2;
   grid-row: 1 / span 3; 
 }


=========Grid-area========
Menentukan nama area pada item sesuai dengan template yang sudah dibuat sebelumnya melalui properti grid-template-areas;
bisa digunakan sebagai shorthand untuk grid-column-start, grid-column-end, grid-row-start dan grid-row-end;
supaya tidak pnnjg seperti diatas kita pakai cara ini:
.my-items{
  grid-area: <row-start> / <column-start> / <row-end> / <column-end>;

  grid-area: 1 / 1 / 3 /4;


  sama seperti diatas;
}


========Justify-self========
Mengatur posisi item pada sebuah cell tehadap sumbu horizontal(kesamping)
ini untuk mengatur element pada items;
contoh & value-nya :
.item {
  justfy-self: start | end | center | stretch;
  1. start = kiri;
  2. end = kanan;
  3. center = tengah
  4. strectch = nilai default atau full jika tidak disi width;
  sama seperti fungsi pada justfy umumnya (justfy-content);
}

========align-self========
Mengatur posisi elemenr item terhadap sumbu vertiikal(keatas)
contoh dan value-nya;
.item{
  align-self: start | end | center | strectch 
  1. start = kiri;
  2. end = kanan;
  3. center = tengah
  4. strectch = nilai default atau full jika tidak beri height;
}


==========Place-self==========
Shorthand posisi item pada sebuah cell terhadap sumbu vertikal dan sumbu horizontal dalam satu deklarasi;
sama seperti cara menggunakan place-content pada element wadah(container);
contoh & value-nya:
.item{
  place-self: <align-self> <justfy-self>

  place-self: end start;
} 